{"ast":null,"code":"/*\n * Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n * USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n'use strict';\n\nvar punycode = require('punycode');\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n} // Reference: RFC 3986, RFC 1808, RFC 2396\n\n/*\n * define these here so at least they only have to be\n * compiled once on the first module load.\n */\n\n\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n    // Special case for a simple path URL\nsimplePathPattern = /^(\\/\\/?(?!\\/)[^?\\s]*)(\\?[^\\s]*)?$/,\n\n/*\n * RFC 2396: characters reserved for delimiting URLs.\n * We actually just auto-escape these.\n */\ndelims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n    // RFC 2396: characters not allowed for various reasons.\nunwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\nautoEscape = ['\\''].concat(unwise),\n\n/*\n * Characters that are never ever allowed in a hostname.\n * Note that any invalid chars are also handled, but these\n * are the ones that are *expected* to be seen, so we fast-path\n * them.\n */\nnonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\nunsafeProtocol = {\n  javascript: true,\n  'javascript:': true\n},\n    // protocols that never have a hostname.\nhostlessProtocol = {\n  javascript: true,\n  'javascript:': true\n},\n    // protocols that always contain a // bit.\nslashedProtocol = {\n  http: true,\n  https: true,\n  ftp: true,\n  gopher: true,\n  file: true,\n  'http:': true,\n  'https:': true,\n  'ftp:': true,\n  'gopher:': true,\n  'file:': true\n},\n    querystring = require('qs');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && typeof url === 'object' && url instanceof Url) {\n    return url;\n  }\n\n  var u = new Url();\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {\n  if (typeof url !== 'string') {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n  /*\n   * Copy chrome, IE, opera backslash-handling behavior.\n   * Back slashes before the query string get converted to forward slashes\n   * See: https://code.google.com/p/chromium/issues/detail?id=25916\n   */\n\n\n  var queryIndex = url.indexOf('?'),\n      splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n  var rest = url;\n  /*\n   * trim before proceeding.\n   * This is to support parse stuff like \"  http://foo.com  \\n\"\n   */\n\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n  /*\n   * figure out if it's got a host\n   * user@server is *always* interpreted as a hostname, and url\n   * resolution will treat //foo/bar as host=foo,path=bar because that's\n   * how the browser resolves relative URLs.\n   */\n\n\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@/]+@[^@/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {\n    /*\n     * there's a hostname.\n     * the first instance of /, ?, ;, or # ends the host.\n     *\n     * If there is an @ in the hostname, then non-host chars *are* allowed\n     * to the left of the last @ sign, unless some host-ending character\n     * comes *before* the @-sign.\n     * URLs are obnoxious.\n     *\n     * ex:\n     * http://a@b@c/ => user:a@b host:c\n     * http://a@b?@c => user:a host:c path:/?@c\n     */\n\n    /*\n     * v0.12 TODO(isaacs): This is not quite how Chrome does things.\n     * Review our test case against browsers more comprehensively.\n     */\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n    /*\n     * at this point, either we have an explicit point where the\n     * auth portion cannot go past, or the last @ char is the decider.\n     */\n\n\n    var auth, atSign;\n\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      /*\n       * atSign must be in auth portion.\n       * http://a@b/c@d => host:b auth:a path:/c@d\n       */\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n    /*\n     * Now we have a portion which is definitely the auth.\n     * Pull that off.\n     */\n\n\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    } // the host is the remaining to the left of the first non-host char\n\n\n    hostEnd = -1;\n\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    } // if we still have not hit it, then the entire thing is a host.\n\n\n    if (hostEnd === -1) {\n      hostEnd = rest.length;\n    }\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd); // pull out port.\n\n    this.parseHost();\n    /*\n     * we've indicated that there is a hostname,\n     * so even if it's empty, it has to be present.\n     */\n\n    this.hostname = this.hostname || '';\n    /*\n     * if hostname begins with [ and ends with ]\n     * assume that it's an IPv6 address.\n     */\n\n    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']'; // validate a little.\n\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n\n        if (!part) {\n          continue;\n        }\n\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              /*\n               * we replace non-ASCII char with a temporary placeholder\n               * we need this to make sure size of hostname is not\n               * broken by replacing non-ASCII by nothing\n               */\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          } // we test again with ASCII char only\n\n\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      /*\n       * IDNA Support: Returns a punycoded representation of \"domain\".\n       * It only converts parts of the domain name that\n       * have non-ASCII characters, i.e. it doesn't matter if\n       * you call it with a domain that already is ASCII-only.\n       */\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n    /*\n     * strip [ and ] from the hostname\n     * the host field still retains them, though\n     */\n\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n  /*\n   * now rest is set to the post-host stuff.\n   * chop off any delim chars.\n   */\n\n\n  if (!unsafeProtocol[lowerProto]) {\n    /*\n     * First, make 100% sure that any \"autoEscape\" chars get\n     * escaped, even if encodeURIComponent doesn't think they\n     * need to be.\n     */\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n\n      if (rest.indexOf(ae) === -1) {\n        continue;\n      }\n\n      var esc = encodeURIComponent(ae);\n\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n\n      rest = rest.split(ae).join(esc);\n    }\n  } // chop off from the tail first.\n\n\n  var hash = rest.indexOf('#');\n\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n\n  var qm = rest.indexOf('?');\n\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n\n  if (rest) {\n    this.pathname = rest;\n  }\n\n  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {\n    this.pathname = '/';\n  } // to support http.request\n\n\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  } // finally, reconstruct the href based on what has been validated.\n\n\n  this.href = this.format();\n  return this;\n}; // format a parsed object into a url string\n\n\nfunction urlFormat(obj) {\n  /*\n   * ensure it's an object, and not a string url.\n   * If it's an obj, this is a no-op.\n   * this way, you can call url_format() on strings\n   * to clean up potentially wonky urls.\n   */\n  if (typeof obj === 'string') {\n    obj = urlParse(obj);\n  }\n\n  if (!(obj instanceof Url)) {\n    return Url.prototype.format.call(obj);\n  }\n\n  return obj.format();\n}\n\nUrl.prototype.format = function () {\n  var auth = this.auth || '';\n\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');\n\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query && typeof this.query === 'object' && Object.keys(this.query).length) {\n    query = querystring.stringify(this.query, {\n      arrayFormat: 'repeat',\n      addQueryPrefix: false\n    });\n  }\n\n  var search = this.search || query && '?' + query || '';\n\n  if (protocol && protocol.substr(-1) !== ':') {\n    protocol += ':';\n  }\n  /*\n   * only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n   * unless they had them to begin with.\n   */\n\n\n  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n\n    if (pathname && pathname.charAt(0) !== '/') {\n      pathname = '/' + pathname;\n    }\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') {\n    hash = '#' + hash;\n  }\n\n  if (search && search.charAt(0) !== '?') {\n    search = '?' + search;\n  }\n\n  pathname = pathname.replace(/[?#]/g, function (match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function (relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) {\n    return relative;\n  }\n\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function (relative) {\n  if (typeof relative === 'string') {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n  /*\n   * hash is always overridden, no matter what.\n   * even href=\"\" will remove it.\n   */\n\n\n  result.hash = relative.hash; // if the relative url is empty, then there's nothing left to do here.\n\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  } // hrefs like //foo/bar always cut to the protocol.\n\n\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n\n      if (rkey !== 'protocol') {\n        result[rkey] = relative[rkey];\n      }\n    } // urlParse appends trailing / to urls like http://www.example.com\n\n\n    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {\n      result.pathname = '/';\n      result.path = result.pathname;\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    /*\n     * if it's a known url protocol, then changing\n     * the protocol does weird things\n     * first, if it's not file:, then we MUST have a host,\n     * and if there was a path\n     * to begin with, then we MUST have a path.\n     * if it is file:, then the host is dropped,\n     * because that's known to be hostless.\n     * anything else is assumed to be absolute.\n     */\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n\n      while (relPath.length && !(relative.host = relPath.shift())) {}\n\n      if (!relative.host) {\n        relative.host = '';\n      }\n\n      if (!relative.hostname) {\n        relative.hostname = '';\n      }\n\n      if (relPath[0] !== '') {\n        relPath.unshift('');\n      }\n\n      if (relPath.length < 2) {\n        relPath.unshift('');\n      }\n\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port; // to support http.request\n\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',\n      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',\n      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n  /*\n   * if the url is a non-slashed url, then relative\n   * links like ../.. should be able\n   * to crawl up to the hostname, as well.  This is strange.\n   * result.protocol has already been set by now.\n   * Later on, put the first path part into the host field.\n   */\n\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n\n    if (result.host) {\n      if (srcPath[0] === '') {\n        srcPath[0] = result.host;\n      } else {\n        srcPath.unshift(result.host);\n      }\n    }\n\n    result.host = '';\n\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n\n      if (relative.host) {\n        if (relPath[0] === '') {\n          relPath[0] = relative.host;\n        } else {\n          relPath.unshift(relative.host);\n        }\n      }\n\n      relative.host = null;\n    }\n\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = relative.host || relative.host === '' ? relative.host : result.host;\n    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath; // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    /*\n     * it's relative\n     * throw away the existing file, and take the new path instead.\n     */\n    if (!srcPath) {\n      srcPath = [];\n    }\n\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (relative.search != null) {\n    /*\n     * just pull out the search.\n     * like href='?foo'.\n     * Put this after the other two cases because it simplifies the booleans\n     */\n    if (psychotic) {\n      result.host = srcPath.shift();\n      result.hostname = result.host;\n      /*\n       * occationaly the auth can get stuck only in host\n       * this especially happens in cases like\n       * url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n       */\n\n      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.hostname = authInHost.shift();\n        result.host = result.hostname;\n      }\n    }\n\n    result.search = relative.search;\n    result.query = relative.query; // to support http.request\n\n    if (result.pathname !== null || result.search !== null) {\n      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    /*\n     * no path at all.  easy.\n     * we've already handled the other stuff above.\n     */\n    result.pathname = null; // to support http.request\n\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n\n    result.href = result.format();\n    return result;\n  }\n  /*\n   * if a url ENDs in . or .., then it must get a trailing slash.\n   * however, if it ends in anything else non-slashy,\n   * then it must NOT get a trailing slash.\n   */\n\n\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';\n  /*\n   * strip single dots, resolve double dots to parent dir\n   * if the path tries to go above the root, `up` ends up > 0\n   */\n\n  var up = 0;\n\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  } // if the path is allowed to go above the root, restore leading ..s\n\n\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/'; // put the host back\n\n  if (psychotic) {\n    result.hostname = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';\n    result.host = result.hostname;\n    /*\n     * occationaly the auth can get stuck only in host\n     * this especially happens in cases like\n     * url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n     */\n\n    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.hostname = authInHost.shift();\n      result.host = result.hostname;\n    }\n  }\n\n  mustEndAbs = mustEndAbs || result.host && srcPath.length;\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (srcPath.length > 0) {\n    result.pathname = srcPath.join('/');\n  } else {\n    result.pathname = null;\n    result.path = null;\n  } // to support request.http\n\n\n  if (result.pathname !== null || result.search !== null) {\n    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n  }\n\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function () {\n  var host = this.host;\n  var port = portPattern.exec(host);\n\n  if (port) {\n    port = port[0];\n\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n\n    host = host.substr(0, host.length - port.length);\n  }\n\n  if (host) {\n    this.hostname = host;\n  }\n};\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\nexports.Url = Url;","map":{"version":3,"sources":["C:/work/react_study/app_react_sample/react_ka_test/node_modules/url/url.js"],"names":["punycode","require","Url","protocol","slashes","auth","host","port","hostname","hash","search","query","pathname","path","href","protocolPattern","portPattern","simplePathPattern","delims","unwise","concat","autoEscape","nonHostChars","hostEndingChars","hostnameMaxLen","hostnamePartPattern","hostnamePartStart","unsafeProtocol","javascript","hostlessProtocol","slashedProtocol","http","https","ftp","gopher","file","querystring","urlParse","url","parseQueryString","slashesDenoteHost","u","parse","prototype","TypeError","queryIndex","indexOf","splitter","uSplit","split","slashRegex","replace","join","rest","trim","length","simplePath","exec","substr","proto","lowerProto","toLowerCase","match","hostEnd","i","hec","atSign","lastIndexOf","slice","decodeURIComponent","parseHost","ipv6Hostname","hostparts","l","part","newpart","j","k","charCodeAt","validParts","notHost","bit","push","unshift","toASCII","p","h","ae","esc","encodeURIComponent","escape","qm","s","format","urlFormat","obj","call","Object","keys","stringify","arrayFormat","addQueryPrefix","charAt","urlResolve","source","relative","resolve","resolveObject","urlResolveObject","rel","result","tkeys","tk","tkey","rkeys","rk","rkey","v","relPath","shift","isSourceAbs","isRelAbs","mustEndAbs","removeAllDots","srcPath","psychotic","pop","authInHost","last","hasTrailingSlash","up","splice","isAbsolute","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n * USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n'use strict';\n\nvar punycode = require('punycode');\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n/*\n * define these here so at least they only have to be\n * compiled once on the first module load.\n */\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n  portPattern = /:[0-9]*$/,\n\n  // Special case for a simple path URL\n  simplePathPattern = /^(\\/\\/?(?!\\/)[^?\\s]*)(\\?[^\\s]*)?$/,\n\n  /*\n   * RFC 2396: characters reserved for delimiting URLs.\n   * We actually just auto-escape these.\n   */\n  delims = [\n    '<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'\n  ],\n\n  // RFC 2396: characters not allowed for various reasons.\n  unwise = [\n    '{', '}', '|', '\\\\', '^', '`'\n  ].concat(delims),\n\n  // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n  autoEscape = ['\\''].concat(unwise),\n  /*\n   * Characters that are never ever allowed in a hostname.\n   * Note that any invalid chars are also handled, but these\n   * are the ones that are *expected* to be seen, so we fast-path\n   * them.\n   */\n  nonHostChars = [\n    '%', '/', '?', ';', '#'\n  ].concat(autoEscape),\n  hostEndingChars = [\n    '/', '?', '#'\n  ],\n  hostnameMaxLen = 255,\n  hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n  hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n  // protocols that can allow \"unsafe\" and \"unwise\" chars.\n  unsafeProtocol = {\n    javascript: true,\n    'javascript:': true\n  },\n  // protocols that never have a hostname.\n  hostlessProtocol = {\n    javascript: true,\n    'javascript:': true\n  },\n  // protocols that always contain a // bit.\n  slashedProtocol = {\n    http: true,\n    https: true,\n    ftp: true,\n    gopher: true,\n    file: true,\n    'http:': true,\n    'https:': true,\n    'ftp:': true,\n    'gopher:': true,\n    'file:': true\n  },\n  querystring = require('qs');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && typeof url === 'object' && url instanceof Url) { return url; }\n\n  var u = new Url();\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {\n  if (typeof url !== 'string') {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  /*\n   * Copy chrome, IE, opera backslash-handling behavior.\n   * Back slashes before the query string get converted to forward slashes\n   * See: https://code.google.com/p/chromium/issues/detail?id=25916\n   */\n  var queryIndex = url.indexOf('?'),\n    splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',\n    uSplit = url.split(splitter),\n    slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  /*\n   * trim before proceeding.\n   * This is to support parse stuff like \"  http://foo.com  \\n\"\n   */\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  /*\n   * figure out if it's got a host\n   * user@server is *always* interpreted as a hostname, and url\n   * resolution will treat //foo/bar as host=foo,path=bar because that's\n   * how the browser resolves relative URLs.\n   */\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@/]+@[^@/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] && (slashes || (proto && !slashedProtocol[proto]))) {\n\n    /*\n     * there's a hostname.\n     * the first instance of /, ?, ;, or # ends the host.\n     *\n     * If there is an @ in the hostname, then non-host chars *are* allowed\n     * to the left of the last @ sign, unless some host-ending character\n     * comes *before* the @-sign.\n     * URLs are obnoxious.\n     *\n     * ex:\n     * http://a@b@c/ => user:a@b host:c\n     * http://a@b?@c => user:a host:c path:/?@c\n     */\n\n    /*\n     * v0.12 TODO(isaacs): This is not quite how Chrome does things.\n     * Review our test case against browsers more comprehensively.\n     */\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) { hostEnd = hec; }\n    }\n\n    /*\n     * at this point, either we have an explicit point where the\n     * auth portion cannot go past, or the last @ char is the decider.\n     */\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      /*\n       * atSign must be in auth portion.\n       * http://a@b/c@d => host:b auth:a path:/c@d\n       */\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    /*\n     * Now we have a portion which is definitely the auth.\n     * Pull that off.\n     */\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) { hostEnd = hec; }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) { hostEnd = rest.length; }\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    /*\n     * we've indicated that there is a hostname,\n     * so even if it's empty, it has to be present.\n     */\n    this.hostname = this.hostname || '';\n\n    /*\n     * if hostname begins with [ and ends with ]\n     * assume that it's an IPv6 address.\n     */\n    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) { continue; }\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              /*\n               * we replace non-ASCII char with a temporary placeholder\n               * we need this to make sure size of hostname is not\n               * broken by replacing non-ASCII by nothing\n               */\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      /*\n       * IDNA Support: Returns a punycoded representation of \"domain\".\n       * It only converts parts of the domain name that\n       * have non-ASCII characters, i.e. it doesn't matter if\n       * you call it with a domain that already is ASCII-only.\n       */\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    /*\n     * strip [ and ] from the hostname\n     * the host field still retains them, though\n     */\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  /*\n   * now rest is set to the post-host stuff.\n   * chop off any delim chars.\n   */\n  if (!unsafeProtocol[lowerProto]) {\n\n    /*\n     * First, make 100% sure that any \"autoEscape\" chars get\n     * escaped, even if encodeURIComponent doesn't think they\n     * need to be.\n     */\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1) { continue; }\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) { this.pathname = rest; }\n  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  // to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  /*\n   * ensure it's an object, and not a string url.\n   * If it's an obj, this is a no-op.\n   * this way, you can call url_format() on strings\n   * to clean up potentially wonky urls.\n   */\n  if (typeof obj === 'string') { obj = urlParse(obj); }\n  if (!(obj instanceof Url)) { return Url.prototype.format.call(obj); }\n  return obj.format();\n}\n\nUrl.prototype.format = function () {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n    pathname = this.pathname || '',\n    hash = this.hash || '',\n    host = false,\n    query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query && typeof this.query === 'object' && Object.keys(this.query).length) {\n    query = querystring.stringify(this.query, {\n      arrayFormat: 'repeat',\n      addQueryPrefix: false\n    });\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') { protocol += ':'; }\n\n  /*\n   * only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n   * unless they had them to begin with.\n   */\n  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') { pathname = '/' + pathname; }\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') { hash = '#' + hash; }\n  if (search && search.charAt(0) !== '?') { search = '?' + search; }\n\n  pathname = pathname.replace(/[?#]/g, function (match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function (relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) { return relative; }\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function (relative) {\n  if (typeof relative === 'string') {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  /*\n   * hash is always overridden, no matter what.\n   * even href=\"\" will remove it.\n   */\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol') { result[rkey] = relative[rkey]; }\n    }\n\n    // urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {\n      result.pathname = '/';\n      result.path = result.pathname;\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    /*\n     * if it's a known url protocol, then changing\n     * the protocol does weird things\n     * first, if it's not file:, then we MUST have a host,\n     * and if there was a path\n     * to begin with, then we MUST have a path.\n     * if it is file:, then the host is dropped,\n     * because that's known to be hostless.\n     * anything else is assumed to be absolute.\n     */\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift())) { }\n      if (!relative.host) { relative.host = ''; }\n      if (!relative.hostname) { relative.hostname = ''; }\n      if (relPath[0] !== '') { relPath.unshift(''); }\n      if (relPath.length < 2) { relPath.unshift(''); }\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',\n    isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',\n    mustEndAbs = isRelAbs || isSourceAbs || (result.host && relative.pathname),\n    removeAllDots = mustEndAbs,\n    srcPath = result.pathname && result.pathname.split('/') || [],\n    relPath = relative.pathname && relative.pathname.split('/') || [],\n    psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  /*\n   * if the url is a non-slashed url, then relative\n   * links like ../.. should be able\n   * to crawl up to the hostname, as well.  This is strange.\n   * result.protocol has already been set by now.\n   * Later on, put the first path part into the host field.\n   */\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') { srcPath[0] = result.host; } else { srcPath.unshift(result.host); }\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') { relPath[0] = relative.host; } else { relPath.unshift(relative.host); }\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = relative.host || relative.host === '' ? relative.host : result.host;\n    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    /*\n     * it's relative\n     * throw away the existing file, and take the new path instead.\n     */\n    if (!srcPath) { srcPath = []; }\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (relative.search != null) {\n    /*\n     * just pull out the search.\n     * like href='?foo'.\n     * Put this after the other two cases because it simplifies the booleans\n     */\n    if (psychotic) {\n      result.host = srcPath.shift();\n      result.hostname = result.host;\n      /*\n       * occationaly the auth can get stuck only in host\n       * this especially happens in cases like\n       * url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n       */\n      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.hostname = authInHost.shift();\n        result.host = result.hostname;\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    // to support http.request\n    if (result.pathname !== null || result.search !== null) {\n      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    /*\n     * no path at all.  easy.\n     * we've already handled the other stuff above.\n     */\n    result.pathname = null;\n    // to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  /*\n   * if a url ENDs in . or .., then it must get a trailing slash.\n   * however, if it ends in anything else non-slashy,\n   * then it must NOT get a trailing slash.\n   */\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';\n\n  /*\n   * strip single dots, resolve double dots to parent dir\n   * if the path tries to go above the root, `up` ends up > 0\n   */\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' || (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';\n    result.host = result.hostname;\n    /*\n     * occationaly the auth can get stuck only in host\n     * this especially happens in cases like\n     * url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n     */\n    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.hostname = authInHost.shift();\n      result.host = result.hostname;\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (srcPath.length > 0) {\n    result.pathname = srcPath.join('/');\n  } else {\n    result.pathname = null;\n    result.path = null;\n  }\n\n  // to support request.http\n  if (result.pathname !== null || result.search !== null) {\n    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function () {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) { this.hostname = host; }\n};\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n"]},"metadata":{},"sourceType":"script"}