{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar define = require('define-data-property');\n\nvar hasDescriptors = require('has-property-descriptors')();\n\nvar gOPD = require('gopd');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $floor = GetIntrinsic('%Math.floor%');\n\nmodule.exports = function setFunctionLength(fn, length) {\n  if (typeof fn !== 'function') {\n    throw new $TypeError('`fn` is not a function');\n  }\n\n  if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {\n    throw new $TypeError('`length` must be a positive 32-bit integer');\n  }\n\n  var loose = arguments.length > 2 && !!arguments[2];\n  var functionLengthIsConfigurable = true;\n  var functionLengthIsWritable = true;\n\n  if ('length' in fn && gOPD) {\n    var desc = gOPD(fn, 'length');\n\n    if (desc && !desc.configurable) {\n      functionLengthIsConfigurable = false;\n    }\n\n    if (desc && !desc.writable) {\n      functionLengthIsWritable = false;\n    }\n  }\n\n  if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {\n    if (hasDescriptors) {\n      define(fn, 'length', length, true, true);\n    } else {\n      define(fn, 'length', length);\n    }\n  }\n\n  return fn;\n};","map":{"version":3,"sources":["C:/work/pec_react/app_react_sample/react_ka_test/node_modules/set-function-length/index.js"],"names":["GetIntrinsic","require","define","hasDescriptors","gOPD","$TypeError","$floor","module","exports","setFunctionLength","fn","length","loose","arguments","functionLengthIsConfigurable","functionLengthIsWritable","desc","configurable","writable"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,sBAAD,CAApB;;AACA,IAAIE,cAAc,GAAGF,OAAO,CAAC,0BAAD,CAAP,EAArB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAII,UAAU,GAAGL,YAAY,CAAC,aAAD,CAA7B;AACA,IAAIM,MAAM,GAAGN,YAAY,CAAC,cAAD,CAAzB;;AAEAO,MAAM,CAACC,OAAP,GAAiB,SAASC,iBAAT,CAA2BC,EAA3B,EAA+BC,MAA/B,EAAuC;AACvD,MAAI,OAAOD,EAAP,KAAc,UAAlB,EAA8B;AAC7B,UAAM,IAAIL,UAAJ,CAAe,wBAAf,CAAN;AACA;;AACD,MAAI,OAAOM,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,GAAG,CAAvC,IAA4CA,MAAM,GAAG,UAArD,IAAmEL,MAAM,CAACK,MAAD,CAAN,KAAmBA,MAA1F,EAAkG;AACjG,UAAM,IAAIN,UAAJ,CAAe,4CAAf,CAAN;AACA;;AAED,MAAIO,KAAK,GAAGC,SAAS,CAACF,MAAV,GAAmB,CAAnB,IAAwB,CAAC,CAACE,SAAS,CAAC,CAAD,CAA/C;AAEA,MAAIC,4BAA4B,GAAG,IAAnC;AACA,MAAIC,wBAAwB,GAAG,IAA/B;;AACA,MAAI,YAAYL,EAAZ,IAAkBN,IAAtB,EAA4B;AAC3B,QAAIY,IAAI,GAAGZ,IAAI,CAACM,EAAD,EAAK,QAAL,CAAf;;AACA,QAAIM,IAAI,IAAI,CAACA,IAAI,CAACC,YAAlB,EAAgC;AAC/BH,MAAAA,4BAA4B,GAAG,KAA/B;AACA;;AACD,QAAIE,IAAI,IAAI,CAACA,IAAI,CAACE,QAAlB,EAA4B;AAC3BH,MAAAA,wBAAwB,GAAG,KAA3B;AACA;AACD;;AAED,MAAID,4BAA4B,IAAIC,wBAAhC,IAA4D,CAACH,KAAjE,EAAwE;AACvE,QAAIT,cAAJ,EAAoB;AACnBD,MAAAA,MAAM,CAACQ,EAAD,EAAK,QAAL,EAAeC,MAAf,EAAuB,IAAvB,EAA6B,IAA7B,CAAN;AACA,KAFD,MAEO;AACNT,MAAAA,MAAM,CAACQ,EAAD,EAAK,QAAL,EAAeC,MAAf,CAAN;AACA;AACD;;AACD,SAAOD,EAAP;AACA,CA9BD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar define = require('define-data-property');\nvar hasDescriptors = require('has-property-descriptors')();\nvar gOPD = require('gopd');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $floor = GetIntrinsic('%Math.floor%');\n\nmodule.exports = function setFunctionLength(fn, length) {\n\tif (typeof fn !== 'function') {\n\t\tthrow new $TypeError('`fn` is not a function');\n\t}\n\tif (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {\n\t\tthrow new $TypeError('`length` must be a positive 32-bit integer');\n\t}\n\n\tvar loose = arguments.length > 2 && !!arguments[2];\n\n\tvar functionLengthIsConfigurable = true;\n\tvar functionLengthIsWritable = true;\n\tif ('length' in fn && gOPD) {\n\t\tvar desc = gOPD(fn, 'length');\n\t\tif (desc && !desc.configurable) {\n\t\t\tfunctionLengthIsConfigurable = false;\n\t\t}\n\t\tif (desc && !desc.writable) {\n\t\t\tfunctionLengthIsWritable = false;\n\t\t}\n\t}\n\n\tif (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {\n\t\tif (hasDescriptors) {\n\t\t\tdefine(fn, 'length', length, true, true);\n\t\t} else {\n\t\t\tdefine(fn, 'length', length);\n\t\t}\n\t}\n\treturn fn;\n};\n"]},"metadata":{},"sourceType":"script"}